<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="0" name="pytest" skips="0" tests="30" time="1.232"><testcase classname="pytest_harvest.tests.test_all" file="pytest_harvest/tests/test_all.py" line="21" name="test_run_all_tests[test_all_together.py]" time="0.09823966026306152"><system-out>
Testing that running pytest on file test_all_together.py results in {&apos;passed&apos;: 9, &apos;skipped&apos;: 0, &apos;failed&apos;: 0}
============================= test session starts ==============================
platform linux -- Python 3.5.6, pytest-3.10.1, py-1.7.0, pluggy-0.8.0
rootdir: /tmp/pytest-of-travis/pytest-0/test_run_all_tests0, inifile:
plugins: metadata-1.7.0, html-1.19.0, harvest-1.0.2.dev11+g41baaf0, cov-2.6.0
collected 9 items

test_run_all_tests.py .........                                          [100%]

=============================== warnings summary ===============================
test_run_all_tests.py:43
  test_run_all_tests.py:43: RemovedInPytest4Warning: While trying to determine id of parameter flatten at position 0 the following exception was raised:
    IndexError: tuple index out of range
  This warning will be an error error in pytest-4.0.
    @pytest.mark.parametrize(&apos;flatten, flatten_more&apos;, [(False, None), (True, None), (True, &apos;my_results&apos;)],
  test_run_all_tests.py:43: RemovedInPytest4Warning: While trying to determine id of parameter flatten_more at position 0 the following exception was raised:
    IndexError: tuple index out of range
  This warning will be an error error in pytest-4.0.
    @pytest.mark.parametrize(&apos;flatten, flatten_more&apos;, [(False, None), (True, None), (True, &apos;my_results&apos;)],
  test_run_all_tests.py:43: RemovedInPytest4Warning: While trying to determine id of parameter flatten at position 1 the following exception was raised:
    IndexError: tuple index out of range
  This warning will be an error error in pytest-4.0.
    @pytest.mark.parametrize(&apos;flatten, flatten_more&apos;, [(False, None), (True, None), (True, &apos;my_results&apos;)],
  test_run_all_tests.py:43: RemovedInPytest4Warning: While trying to determine id of parameter flatten_more at position 1 the following exception was raised:
    IndexError: tuple index out of range
  This warning will be an error error in pytest-4.0.
    @pytest.mark.parametrize(&apos;flatten, flatten_more&apos;, [(False, None), (True, None), (True, &apos;my_results&apos;)],
  test_run_all_tests.py:43: RemovedInPytest4Warning: While trying to determine id of parameter flatten at position 2 the following exception was raised:
    IndexError: tuple index out of range
  This warning will be an error error in pytest-4.0.
    @pytest.mark.parametrize(&apos;flatten, flatten_more&apos;, [(False, None), (True, None), (True, &apos;my_results&apos;)],
  test_run_all_tests.py:43: RemovedInPytest4Warning: While trying to determine id of parameter flatten_more at position 2 the following exception was raised:
    IndexError: tuple index out of range
  This warning will be an error error in pytest-4.0.
    @pytest.mark.parametrize(&apos;flatten, flatten_more&apos;, [(False, None), (True, None), (True, &apos;my_results&apos;)],

-- Docs: https://docs.pytest.org/en/latest/warnings.html
===================== 9 passed, 6 warnings in 0.05 seconds =====================
</system-out></testcase><testcase classname="pytest_harvest.tests.test_all" file="pytest_harvest/tests/test_all.py" line="21" name="test_run_all_tests[test_saved_fixture_in_fixture.py]" time="0.06880712509155273"><system-out>
Testing that running pytest on file test_saved_fixture_in_fixture.py results in {&apos;passed&apos;: 2, &apos;failed&apos;: 0}
============================= test session starts ==============================
platform linux -- Python 3.5.6, pytest-3.10.1, py-1.7.0, pluggy-0.8.0
rootdir: /tmp/pytest-of-travis/pytest-0/test_run_all_tests1, inifile:
plugins: metadata-1.7.0, html-1.19.0, harvest-1.0.2.dev11+g41baaf0, cov-2.6.0
collected 2 items

test_run_all_tests.py ..                                                 [100%]

=========================== 2 passed in 0.02 seconds ===========================
</system-out></testcase><testcase classname="pytest_harvest.tests.test_all" file="pytest_harvest/tests/test_all.py" line="21" name="test_run_all_tests[test_default_fixtures.py]" time="0.09352779388427734"><system-out>
Testing that running pytest on file test_default_fixtures.py results in {&apos;passed&apos;: 8, &apos;skipped&apos;: 0, &apos;failed&apos;: 0}
============================= test session starts ==============================
platform linux -- Python 3.5.6, pytest-3.10.1, py-1.7.0, pluggy-0.8.0
rootdir: /tmp/pytest-of-travis/pytest-0/test_run_all_tests2, inifile:
plugins: metadata-1.7.0, html-1.19.0, harvest-1.0.2.dev11+g41baaf0, cov-2.6.0
collected 8 items

test_run_all_tests.py ........                                           [100%]

=============================== warnings summary ===============================
test_run_all_tests.py::test_synthesis_default_module_dct
  /home/travis/build/smarie/python-pytest-harvest/pytest_harvest/results_session.py:341: UserWarning: [pytest-harvest] Test items status is not available. You should maybe install pytest-harvest with pip. If it is already the case, you case try to force-use it by adding `pytest_plugins = [&apos;harvest&apos;]` to your conftest.py. But for normal use this should not be required, installing with pip should be enough.
    warn(&quot;[pytest-harvest] Test items status is not available. You should maybe install pytest-harvest with &quot;

test_run_all_tests.py::test_synthesis_default_module_df
  /home/travis/build/smarie/python-pytest-harvest/pytest_harvest/results_session.py:341: UserWarning: [pytest-harvest] Test items status is not available. You should maybe install pytest-harvest with pip. If it is already the case, you case try to force-use it by adding `pytest_plugins = [&apos;harvest&apos;]` to your conftest.py. But for normal use this should not be required, installing with pip should be enough.
    warn(&quot;[pytest-harvest] Test items status is not available. You should maybe install pytest-harvest with &quot;

test_run_all_tests.py::test_synthesis_default_session_dct
  /home/travis/build/smarie/python-pytest-harvest/pytest_harvest/results_session.py:341: UserWarning: [pytest-harvest] Test items status is not available. You should maybe install pytest-harvest with pip. If it is already the case, you case try to force-use it by adding `pytest_plugins = [&apos;harvest&apos;]` to your conftest.py. But for normal use this should not be required, installing with pip should be enough.
    warn(&quot;[pytest-harvest] Test items status is not available. You should maybe install pytest-harvest with &quot;

test_run_all_tests.py::test_synthesis_default_session_df
  /home/travis/build/smarie/python-pytest-harvest/pytest_harvest/results_session.py:341: UserWarning: [pytest-harvest] Test items status is not available. You should maybe install pytest-harvest with pip. If it is already the case, you case try to force-use it by adding `pytest_plugins = [&apos;harvest&apos;]` to your conftest.py. But for normal use this should not be required, installing with pip should be enough.
    warn(&quot;[pytest-harvest] Test items status is not available. You should maybe install pytest-harvest with &quot;

-- Docs: https://docs.pytest.org/en/latest/warnings.html
===================== 8 passed, 4 warnings in 0.05 seconds =====================
</system-out></testcase><testcase classname="pytest_harvest.tests.test_all" file="pytest_harvest/tests/test_all.py" line="21" name="test_run_all_tests[test_results_bags.py]" time="0.11669707298278809"><system-out>
Testing that running pytest on file test_results_bags.py results in {&apos;passed&apos;: 6, &apos;skipped&apos;: 0, &apos;failed&apos;: 0}
============================= test session starts ==============================
platform linux -- Python 3.5.6, pytest-3.10.1, py-1.7.0, pluggy-0.8.0
rootdir: /tmp/pytest-of-travis/pytest-0/test_run_all_tests3, inifile:
plugins: metadata-1.7.0, html-1.19.0, harvest-1.0.2.dev11+g41baaf0, cov-2.6.0
collected 6 items

test_run_all_tests.py ......                                             [100%]

=========================== 6 passed in 0.03 seconds ===========================
</system-out></testcase><testcase classname="pytest_harvest.tests.test_all" file="pytest_harvest/tests/test_all.py" line="21" name="test_run_all_tests[test_get_session_results.py]" time="0.16150665283203125"><system-out>
Testing that running pytest on file test_get_session_results.py results in {&apos;passed&apos;: 15, &apos;skipped&apos;: 1, &apos;failed&apos;: 1}
============================= test session starts ==============================
platform linux -- Python 3.5.6, pytest-3.10.1, py-1.7.0, pluggy-0.8.0
rootdir: /tmp/pytest-of-travis/pytest-0/test_run_all_tests4, inifile:
plugins: metadata-1.7.0, html-1.19.0, harvest-1.0.2.dev11+g41baaf0, cov-2.6.0
collected 17 items

test_run_all_tests.py ........sF.......                                  [100%]

=================================== FAILURES ===================================
_________________________________ test_failing _________________________________

    def test_failing():
&gt;       pytest.fail(&quot;normal, intended failure here&quot;)
E       Failed: normal, intended failure here

test_run_all_tests.py:116: Failed
=============================== warnings summary ===============================
test_run_all_tests.py::test_foo_synthesis_all_options[duration_in_ms=False-flatten=True]
  /tmp/pytest-of-travis/pytest-0/test_run_all_tests4/test_run_all_tests.py:69: RemovedInPytest4Warning: MarkInfo objects are deprecated as they contain merged marks which are hard to deal with correctly.
  Please use node.get_closest_marker(name) or node.iter_markers(name).
  Docs: https://docs.pytest.org/en/latest/mark.html#updating-code
    expected_keys.update({mark.args[0] for mark in test_foo.parametrize})

test_run_all_tests.py::test_foo_synthesis_all_options[duration_in_ms=True-flatten=True]
  /tmp/pytest-of-travis/pytest-0/test_run_all_tests4/test_run_all_tests.py:69: RemovedInPytest4Warning: MarkInfo objects are deprecated as they contain merged marks which are hard to deal with correctly.
  Please use node.get_closest_marker(name) or node.iter_markers(name).
  Docs: https://docs.pytest.org/en/latest/mark.html#updating-code
    expected_keys.update({mark.args[0] for mark in test_foo.parametrize})

-- Docs: https://docs.pytest.org/en/latest/warnings.html
========== 1 failed, 15 passed, 1 skipped, 2 warnings in 0.11 seconds ==========
</system-out></testcase><testcase classname="pytest_harvest.tests.test_all" file="pytest_harvest/tests/test_all.py" line="21" name="test_run_all_tests[test_saved_fixture_in_global_var.py]" time="0.06755566596984863"><system-out>
Testing that running pytest on file test_saved_fixture_in_global_var.py results in {&apos;passed&apos;: 2, &apos;failed&apos;: 0}
============================= test session starts ==============================
platform linux -- Python 3.5.6, pytest-3.10.1, py-1.7.0, pluggy-0.8.0
rootdir: /tmp/pytest-of-travis/pytest-0/test_run_all_tests5, inifile:
plugins: metadata-1.7.0, html-1.19.0, harvest-1.0.2.dev11+g41baaf0, cov-2.6.0
collected 2 items

test_run_all_tests.py ..                                                 [100%]

=========================== 2 passed in 0.02 seconds ===========================
</system-out></testcase><testcase classname="pytest_harvest.tests.test_decorator" file="pytest_harvest/tests/test_decorator.py" line="32" name="test_normal_normal" time="0.0016181468963623047"><system-out>0
1
2
3
4
5
6
7
8
9
</system-out></testcase><testcase classname="pytest_harvest.tests.test_decorator" file="pytest_harvest/tests/test_decorator.py" line="42" name="test_normal_gen" time="0.001957416534423828"><system-out>0
1
2
3
4
5
6
7
8
9
</system-out></testcase><testcase classname="pytest_harvest.tests.test_decorator" file="pytest_harvest/tests/test_decorator.py" line="55" name="test_gen_gen" time="0.0016787052154541016"><system-out>0
</system-out></testcase><testcase classname="pytest_harvest.tests.test_decorator" file="pytest_harvest/tests/test_decorator.py" line="66" name="test_gen_normal" time="0.0014257431030273438"><system-out>0
1
2
3
4
5
6
7
8
9
</system-out></testcase><testcase classname="pytest_harvest.tests.test_doc_basic" file="pytest_harvest/tests/test_doc_basic.py" line="3" name="test_foo[world]" time="0.0019843578338623047"><system-out>hello, world
</system-out></testcase><testcase classname="pytest_harvest.tests.test_doc_basic" file="pytest_harvest/tests/test_doc_basic.py" line="3" name="test_foo[self]" time="0.0018367767333984375"><system-out>hello, self
</system-out></testcase><testcase classname="pytest_harvest.tests.test_doc_basic" file="pytest_harvest/tests/test_doc_basic.py" line="8" name="test_synthesis" time="0.0023818016052246094"><system-out>[&apos;test_foo[world]&apos;, &apos;test_foo[self]&apos;]
{&apos;duration_ms&apos;: 0.6184577941894531, &apos;status&apos;: &apos;passed&apos;, &apos;p&apos;: &apos;world&apos;, &apos;pytest_obj&apos;: &lt;function test_foo at 0x7f07cfa89400&gt;}
</system-out></testcase><testcase classname="pytest_harvest.tests.test_doc_example" file="pytest_harvest/tests/test_doc_example.py" line="22" name="test_my_app_bench[A-1]" time="0.0025110244750976562"></testcase><testcase classname="pytest_harvest.tests.test_doc_example" file="pytest_harvest/tests/test_doc_example.py" line="22" name="test_my_app_bench[A-2]" time="0.0024421215057373047"></testcase><testcase classname="pytest_harvest.tests.test_doc_example" file="pytest_harvest/tests/test_doc_example.py" line="22" name="test_my_app_bench[B-1]" time="0.0025441646575927734"></testcase><testcase classname="pytest_harvest.tests.test_doc_example" file="pytest_harvest/tests/test_doc_example.py" line="22" name="test_my_app_bench[B-2]" time="0.0020880699157714844"></testcase><testcase classname="pytest_harvest.tests.test_doc_example" file="pytest_harvest/tests/test_doc_example.py" line="22" name="test_my_app_bench[C-1]" time="0.0026335716247558594"></testcase><testcase classname="pytest_harvest.tests.test_doc_example" file="pytest_harvest/tests/test_doc_example.py" line="22" name="test_my_app_bench[C-2]" time="0.002302408218383789"></testcase><testcase classname="pytest_harvest.tests.test_doc_example" file="pytest_harvest/tests/test_doc_example.py" line="36" name="test_basic" time="0.0014929771423339844"></testcase><testcase classname="pytest_harvest.tests.test_doc_example" file="pytest_harvest/tests/test_doc_example.py" line="42" name="test_synthesis" time="0.007544517517089844"><system-out>test_id                 status      duration_ms    algo_param  dataset          accuracy
----------------------  --------  -------------  ------------  -------------  ----------
test_my_app_bench[A-1]  passed         0.267506             1  my dataset #A    0.751151
test_my_app_bench[A-2]  passed         0.514984             2  my dataset #A    0.50247
test_my_app_bench[B-1]  passed         0.492811             1  my dataset #B    0.167378
test_my_app_bench[B-2]  passed         0.316381             2  my dataset #B    0.231987
test_my_app_bench[C-1]  passed         0.548124             1  my dataset #C    0.329645
test_my_app_bench[C-2]  passed         0.343084             2  my dataset #C    0.342016
test_basic              passed         0.383854           nan  nan            nan
</system-out></testcase><testcase classname="pytest_harvest.tests.test_doc_example_custom" file="pytest_harvest/tests/test_doc_example_custom.py" line="34" name="test_my_app_bench[A-1]" time="0.0023958683013916016"></testcase><testcase classname="pytest_harvest.tests.test_doc_example_custom" file="pytest_harvest/tests/test_doc_example_custom.py" line="34" name="test_my_app_bench[A-2]" time="0.002933502197265625"></testcase><testcase classname="pytest_harvest.tests.test_doc_example_custom" file="pytest_harvest/tests/test_doc_example_custom.py" line="34" name="test_my_app_bench[B-1]" time="0.0024805068969726562"></testcase><testcase classname="pytest_harvest.tests.test_doc_example_custom" file="pytest_harvest/tests/test_doc_example_custom.py" line="34" name="test_my_app_bench[B-2]" time="0.002214193344116211"></testcase><testcase classname="pytest_harvest.tests.test_doc_example_custom" file="pytest_harvest/tests/test_doc_example_custom.py" line="34" name="test_my_app_bench[C-1]" time="0.0027365684509277344"></testcase><testcase classname="pytest_harvest.tests.test_doc_example_custom" file="pytest_harvest/tests/test_doc_example_custom.py" line="34" name="test_my_app_bench[C-2]" time="0.002176523208618164"></testcase><testcase classname="pytest_harvest.tests.test_doc_example_custom" file="pytest_harvest/tests/test_doc_example_custom.py" line="48" name="test_basic" time="0.0010385513305664062"></testcase><testcase classname="pytest_harvest.tests.test_doc_example_custom" file="pytest_harvest/tests/test_doc_example_custom.py" line="54" name="test_synthesis" time="0.009118318557739258"><system-out>
Keys:
test_my_app_bench[A-1]
test_my_app_bench[A-2]
test_my_app_bench[B-1]
test_my_app_bench[B-2]
test_my_app_bench[C-1]
test_my_app_bench[C-2]
test_basic

First node:
&apos;pytest_obj&apos;: &lt;function test_my_app_bench at 0x7f07bdd94d90&gt;
&apos;status&apos;: &apos;passed&apos;
&apos;duration_ms&apos;: 0.3345012664794922
&apos;algo_param&apos;: 1
&apos;dataset&apos;: &apos;my dataset #A&apos;
&apos;accuracy&apos;: 0.10344875278580079
test_id                 status      duration_ms    algo_param  dataset           accuracy
----------------------  --------  -------------  ------------  -------------  -----------
test_my_app_bench[A-1]  passed         0.334501             1  my dataset #A    0.103449
test_my_app_bench[A-2]  passed         0.495195             2  my dataset #A    0.685967
test_my_app_bench[B-1]  passed         0.503778             1  my dataset #B    0.768037
test_my_app_bench[B-2]  passed         0.491142             2  my dataset #B    0.0457471
test_my_app_bench[C-1]  passed         0.417709             1  my dataset #C    0.507557
test_my_app_bench[C-2]  passed         0.330448             2  my dataset #C    0.0174957
test_basic              passed         0.329733           nan  nan            nan
</system-out></testcase><testcase classname="pytest_harvest.tests.test_results_bag_basic" file="pytest_harvest/tests/test_results_bag_basic.py" line="3" name="test_results_bag_basic" time="0.002817869186401367"></testcase></testsuite>